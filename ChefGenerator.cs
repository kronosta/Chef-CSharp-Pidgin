using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Linq;
using System.Text;
using Microsoft.CodeAnalysis;

namespace Kronosta.ChefCSharpPidgin
{
    [Generator(LanguageNames.CSharp)]
// I need to use some APIs that the EnforceExtendedAnalyzerRules property bans
#pragma warning disable RS1036 // Specify analyzer banned API enforcement setting
    public class ChefGenerator : IIncrementalGenerator
#pragma warning restore RS1036 // Specify analyzer banned API enforcement setting
    {
        public static string GeneratedComment = "// Generated by Chef-C# Pidgin";
        public static string NamespaceName = "Kronosta.ChefCSharpPidgin";
        public static string Indent = "    ";
        public static string GeneratedPrefix = "Chef__Generated.";

        public List<Action<ChefCompiler>> Mods;

        public ChefGenerator()
        {
            Mods = new List<Action<ChefCompiler>>();
        }

        public ChefGenerator(List<Action<ChefCompiler>> mods)
        {
            Mods = mods;
        }

        public void Initialize(IncrementalGeneratorInitializationContext context)
        {
            context.RegisterPostInitializationOutput(static context2 =>
            {
                context2.AddSource(GeneratedPrefix + "Attributes.cs", $$"""
                    {{GeneratedComment}}
                    using System;
                    using System.Diagnostics;
                    namespace Kronosta.ChefCSharpPidgin
                    {
                        [Conditional("COMPILE_TIME_ONLY")]
                        [System.AttributeUsage(System.AttributeTargets.Class
                        /**/                 | System.AttributeTargets.Struct
                        /**/                 | System.AttributeTargets.Interface)]
                        internal sealed class ChefClassAttribute : Attribute
                        {
                            public string[] GlobalChefCompilerArgs;
                            public string Using;

                            public ChefClassAttribute()
                            {
                                GlobalChefCompilerArgs = new string[0];
                                Using = "";
                            }
                        }

                        [Conditional("COMPILE_TIME_ONLY")]
                        [System.AttributeUsage(System.AttributeTargets.Method)]
                        internal sealed class ChefMethodAttribute : Attribute
                        {
                            private string ChefCode;
                            public string IngredientTransformer;
                            public string MixingBowlTransformer;
                            public string BakingDishTransformer;
                            public string ReturnTransformer;
                            public string[] ChefCompilerArgs;

                            public ChefMethodAttribute(string code)
                            {
                                ChefCode = code;
                                IngredientTransformer = "";
                                MixingBowlTransformer = "";
                                BakingDishTransformer = "";
                                ReturnTransformer = "";
                                ChefCompilerArgs = new string[0];
                            }
                        }

                        [Conditional("COMPILE_TIME_ONLY")]
                        [System.AttributeUsage(System.AttributeTargets.Class
                        /**/                 | System.AttributeTargets.Struct
                        /**/                 | System.AttributeTargets.Interface,
                        /**/                 AllowMultiple = true)]
                        internal sealed class ChefUnaryOperatorAttribute : Attribute
                        {
                            private string Operator;
                            private string RightType;
                            private string ReturnType;
                            private string ChefCode;
                            public string IngredientTransformer;
                            public string MixingBowlTransformer;
                            public string BakingDishTransformer;
                            public string ReturnTransformer;
                            public string[] ChefCompilerArgs;

                            public ChefUnaryOperatorAttribute(string op, string rightType, string returnType, string code)
                            {
                                Operator = op;
                                RightType = rightType;
                                ReturnType = returnType;
                                ChefCode = code;
                                IngredientTransformer = "";
                                MixingBowlTransformer = "";
                                BakingDishTransformer = "";
                                ReturnTransformer = "";
                                ChefCompilerArgs = new string[0];
                            }
                        }

                        [Conditional("COMPILE_TIME_ONLY")]
                        [System.AttributeUsage(System.AttributeTargets.Class
                        /**/                 | System.AttributeTargets.Struct
                        /**/                 | System.AttributeTargets.Interface,
                        /**/                 AllowMultiple = true)]
                        internal sealed class ChefBinaryOperatorAttribute : Attribute
                        {
                            private string Operator;
                            private string LeftType;
                            private string RightType;
                            private string ReturnType;
                            private string ChefCode;
                            public string IngredientTransformer;
                            public string MixingBowlTransformer;
                            public string BakingDishTransformer;
                            public string ReturnTransformer;
                            public string[] ChefCompilerArgs;


                            public ChefBinaryOperatorAttribute(
                                string op, string leftType, string rightType, string returnType, string code)
                            {
                                Operator = op;
                                LeftType = leftType;
                                RightType = rightType;
                                ReturnType = returnType;
                                ChefCode = code;
                                IngredientTransformer = "";
                                MixingBowlTransformer = "";
                                BakingDishTransformer = "";
                                ReturnTransformer = "";
                                ChefCompilerArgs = new string[0];
                            }
                        }

                        [Conditional("COMPILE_TIME_ONLY")]
                        [System.AttributeUsage(System.AttributeTargets.Class
                        /**/                 | System.AttributeTargets.Struct
                        /**/                 | System.AttributeTargets.Interface,
                        /**/                 AllowMultiple = true)]
                        internal sealed class ChefCastOperatorAttribute : Attribute
                        {
                            private bool Explicit;
                            private string ParamType;
                            private string ReturnType;
                            private string ChefCode;
                            public string IngredientTransformer;
                            public string MixingBowlTransformer;
                            public string BakingDishTransformer;
                            public string ReturnTransformer;
                            public string[] ChefCompilerArgs;

                            public ChefCastOperatorAttribute(bool isExplicit, string paramType, string returnType, string chefCode)
                            {
                                Explicit = isExplicit;
                                ParamType = paramType;
                                ReturnType = returnType;
                                ChefCode = chefCode;
                                IngredientTransformer = "";
                                MixingBowlTransformer = "";
                                BakingDishTransformer = "";
                                ReturnTransformer = "";
                                ChefCompilerArgs = new string[0];
                            }
                        }

                        [Conditional("COMPILE_TIME_ONLY")]
                        [System.AttributeUsage(System.AttributeTargets.Class
                        /**/                 | System.AttributeTargets.Struct
                        /**/                 | System.AttributeTargets.Interface,
                        /**/                 AllowMultiple = true)]
                        internal sealed class ChefPropertyAttribute : Attribute
                        {
                            private string Name;
                            private string Type;
                            private string GetChefCode;
                            private string SetChefCode;
                            public string GetIngredientTransformer;
                            public string GetMixingBowlTransformer;
                            public string GetBakingDishTransformer;
                            public string ReturnTransformer;
                            public string SetIngredientTransformer;
                            public string SetMixingBowlTransformer;
                            public string SetBakingDishTransformer;
                            public string GetterModifier;
                            public string SetterModifier;
                            public string[] GetChefCompilerArgs;
                            public string[] SetChefCompilerArgs;

                            public ChefPropertyAttribute(string name, string type, string getChefCode, string setChefCode)
                            {
                                Name = name;
                                Type = type;
                                GetChefCode = getChefCode;
                                SetChefCode = setChefCode;
                                GetIngredientTransformer = "";
                                GetMixingBowlTransformer = "";
                                GetBakingDishTransformer = "";
                                ReturnTransformer = "";
                                SetIngredientTransformer = "";
                                SetMixingBowlTransformer = "";
                                SetBakingDishTransformer = "";
                                GetterModifier = "";
                                SetterModifier = "";
                                GetChefCompilerArgs = new string[0];
                                SetChefCompilerArgs = new string[0];
                            }
                        }

                        [Conditional("COMPILE_TIME_ONLY")]
                        [System.AttributeUsage(System.AttributeTargets.Class
                        /**/                 | System.AttributeTargets.Struct
                        /**/                 | System.AttributeTargets.Interface,
                        /**/                 AllowMultiple = true)]
                        internal sealed class ChefIndexerAttribute : Attribute
                        {
                            private string Params;
                            private string ReturnType;
                            private string GetChefCode;
                            private string SetChefCode;
                            public string GetIngredientTransformer;
                            public string GetMixingBowlTransformer;
                            public string GetBakingDishTransformer;
                            public string ReturnTransformer;
                            public string SetIngredientTransformer;
                            public string SetMixingBowlTransformer;
                            public string SetBakingDishTransformer;
                            public string GetterModifier;
                            public string SetterModifier;
                            public string[] GetChefCompilerArgs;
                            public string[] SetChefCompilerArgs;

                            public ChefIndexerAttribute(string args, string returnType, string getChefCode, string setChefCode)
                            {
                                Params = args;
                                ReturnType = returnType;
                                GetChefCode = getChefCode;
                                SetChefCode = setChefCode;
                                GetIngredientTransformer = "";
                                GetMixingBowlTransformer = "";
                                GetBakingDishTransformer = "";
                                ReturnTransformer = "";
                                SetIngredientTransformer = "";
                                SetMixingBowlTransformer = "";
                                SetBakingDishTransformer = "";
                                GetterModifier = "";
                                SetterModifier = "";
                                GetChefCompilerArgs = new string[0];
                                SetChefCompilerArgs = new string[0];
                            }
                        }
                    }
                    """);
            });
            string attributeName = NamespaceName + ".ChefClassAttribute";
            var pipeline = context.SyntaxProvider.ForAttributeWithMetadataName(
                attributeName,
                static (node, token) => true,
                static (context2, token) => context2
            );
            context.RegisterSourceOutput(pipeline, Emit);
        }

        public void Emit(SourceProductionContext spContext, GeneratorAttributeSyntaxContext generatorContext)
        {
            StringBuilder builder = new StringBuilder();
            AttributeData chefClassAttribute = generatorContext.Attributes[0];
            string usingArg = "";
            if (chefClassAttribute.NamedArguments.Any(x => x.Key == "Using"))
            {
                TypedConstant usingArgConstant = chefClassAttribute.NamedArguments.Where(x => x.Key == "Using").First().Value;
                if (usingArgConstant.Value is string)
                    usingArg = (string)usingArgConstant.Value;
            }
            string[] globalChefCompilerArgsArg = new string[0];
            if (chefClassAttribute.NamedArguments.Any(x => x.Key == "GlobalChefCompilerArgs"))
            {
                TypedConstant globalChefCompilerArgsArgConstant = 
                    chefClassAttribute.NamedArguments.Where(x => x.Key == "GlobalChefCompilerArgs").First().Value;
                if (globalChefCompilerArgsArgConstant.Value is string[])
                    usingArg = (string)globalChefCompilerArgsArgConstant.Value;
            }
            builder.AppendLine($$"""
                {{GeneratedComment}}
                {{usingArg}}
                """);
            if (generatorContext.TargetSymbol.ContainingNamespace != null &&
                !generatorContext.TargetSymbol.ContainingNamespace.IsGlobalNamespace)
            {
                builder.AppendLine($$"""
                    namespace {{generatorContext.TargetSymbol.ContainingNamespace}}
                    {
                    """);
            }
            INamedTypeSymbol containerType = (INamedTypeSymbol)generatorContext.TargetSymbol;
            string totalContainingTypeCode = "###";
            while (containerType != null) 
            {
                totalContainingTypeCode = Utils.EncloseInPartialType(totalContainingTypeCode, containerType);
                containerType = containerType.ContainingType;
            }
            builder.AppendLine(totalContainingTypeCode);
            if (generatorContext.TargetSymbol.ContainingNamespace != null &&
                !generatorContext.TargetSymbol.ContainingNamespace.IsGlobalNamespace)
                builder.AppendLine("}");
            builder.Replace("###", EmitMethods(spContext, generatorContext, globalChefCompilerArgsArg));
            spContext.AddSource(
                GeneratedPrefix + "Class." + Utils.GetFullMetadataName(generatorContext.TargetSymbol) + ".cs",
                builder.ToString());
        }

        public string EmitMethods(SourceProductionContext spContext, GeneratorAttributeSyntaxContext generatorContext, string[] globalChefCompilerArgs)
        {
            StringBuilder builder = new StringBuilder();
            if (generatorContext.TargetSymbol is INamedTypeSymbol)
            {
                INamedTypeSymbol type = (INamedTypeSymbol)generatorContext.TargetSymbol;
                IEnumerable<IMethodSymbol> methods = type
                    .GetMembers()
                    .Where(symbol => symbol is IMethodSymbol)
                    .Cast<IMethodSymbol>()
                    .Where(symbol =>
                        symbol.IsPartialDefinition &&
                        symbol.GetAttributes().Any(attribute =>
                            attribute.AttributeClass != null &&
                            Utils.GetFullMetadataName(attribute.AttributeClass) == "Kronosta.ChefCSharpPidgin.ChefMethodAttribute"
                        )
                    );
                foreach (IMethodSymbol methodSymbol in methods)
                {
                    StringBuilder methodBuilder = new StringBuilder();
                    ImmutableArray<AttributeData> attributes = methodSymbol.GetAttributes();
                    AttributeData chefMethodAttribute = attributes
                    .Where(attribute =>
                            attribute.AttributeClass != null &&
                            Utils.GetFullMetadataName(attribute.AttributeClass) == "Kronosta.ChefCSharpPidgin.ChefMethodAttribute" &&
                            attribute.ConstructorArguments.Length > 0
                        ).First();
                    methodBuilder.Append(EmitMethod(methodSymbol, chefMethodAttribute, globalChefCompilerArgs));
                    builder.Append(methodBuilder.ToString());
                }
            }
            return builder.ToString();
        }

        public string EmitMethod(IMethodSymbol methodSymbol, AttributeData attribute, string[] globalChefCompilerArgs)
        {
            string code = EmitMethodBody(methodSymbol, attribute, globalChefCompilerArgs);
            return Utils.EncloseInPartialMethod(code, methodSymbol);
        }

        public string EmitMethodBody(IMethodSymbol methodSymbol, AttributeData attribute, string[] globalChefCompilerArgs)
        {
            List<TypedConstant> constructorArgs = attribute.ConstructorArguments.ToList();
            Dictionary<string, TypedConstant> namedArgs = attribute.NamedArguments.ToDictionary();
            string chefCode = (string)constructorArgs[0].Value;
            string ingredientTransformer = 
                namedArgs.ContainsKey("IngredientTransformer")
                ? (string)namedArgs["IngredientTransformer"].Value ?? ""
                : "";
            string mixingBowlTransformer =
                namedArgs.ContainsKey("MixingBowlTransformer")
                ? (string)namedArgs["MixingBowlTransformer"].Value ?? ""
                : "";
            string bakingDishTransformer =
                namedArgs.ContainsKey("BakingDishTransformer")
                ? (string)namedArgs["BakingDishTransformer"].Value ?? ""
                : "";
            string returnTransformer =
                namedArgs.ContainsKey("ReturnTransformer")
                ? (string)namedArgs["ReturnTransformer"].Value ?? ""
                : "";
            string[] localChefCompilerArgs =
                namedArgs.ContainsKey("ChefCompilerArgs")
                ? (string[])namedArgs["ChefCompilerArgs"].Value ?? new string[0]
                : new string[0];
            List<string> chefCompilerArgs = localChefCompilerArgs.Concat(globalChefCompilerArgs).ToList();
            ChefCompiler compiler = new ChefCompiler(chefCompilerArgs);
            foreach (Action<ChefCompiler> mod in Mods)
                mod(compiler);
            return compiler.Compile(methodSymbol, chefCode, ingredientTransformer, mixingBowlTransformer, bakingDishTransformer, returnTransformer);
        }
    }
}
